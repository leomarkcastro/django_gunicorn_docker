[
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "posts.models",
        "description": "posts.models",
        "isExtraImport": true,
        "detail": "posts.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "posts.models",
        "description": "posts.models",
        "isExtraImport": true,
        "detail": "posts.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "posts.models",
        "description": "posts.models",
        "isExtraImport": true,
        "detail": "posts.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "posts.models",
        "description": "posts.models",
        "isExtraImport": true,
        "detail": "posts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "GetpostConfig",
        "kind": 6,
        "importPath": "getpost.apps",
        "description": "getpost.apps",
        "peekOfCode": "class GetpostConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'getpost'",
        "detail": "getpost.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "getpost.urls",
        "description": "getpost.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.route_test, name=\"index\"),\n]",
        "detail": "getpost.urls",
        "documentation": {}
    },
    {
        "label": "route_test",
        "kind": 2,
        "importPath": "getpost.views",
        "description": "getpost.views",
        "peekOfCode": "def route_test(request):\n    \"\"\"\n    List all code snippets, or create a new snippet.\n    \"\"\"\n    if request.method == 'GET':\n        # get query params\n        query_params = request.GET\n        return JsonResponse({\n            \"method\": request.method,\n            \"path\": request.path,",
        "detail": "getpost.views",
        "documentation": {}
    },
    {
        "label": "LandingConfig",
        "kind": 6,
        "importPath": "landing.apps",
        "description": "landing.apps",
        "peekOfCode": "class LandingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'landing'",
        "detail": "landing.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "landing.urls",
        "description": "landing.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]",
        "detail": "landing.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "landing.views",
        "description": "landing.views",
        "peekOfCode": "def index(request):\n    return HttpResponse(\"hello world\")",
        "detail": "landing.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "posts.migrations.0001_initial",
        "description": "posts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('text', models.CharField(max_length=200)),",
        "detail": "posts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "PostsConfig",
        "kind": 6,
        "importPath": "posts.apps",
        "description": "posts.apps",
        "peekOfCode": "class PostsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'posts'",
        "detail": "posts.apps",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "posts.models",
        "description": "posts.models",
        "peekOfCode": "class Post(models.Model):\n    text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n    def __str__(self):\n        return self.text",
        "detail": "posts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "posts.urls",
        "description": "posts.urls",
        "peekOfCode": "urlpatterns = [\n    # ex: /polls/\n    path(\"\", views.index, name=\"index\"),\n    # ex: /polls/5/\n    path(\"<int:question_id>/\", views.detail, name=\"detail_view\"),\n]",
        "detail": "posts.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "posts.views",
        "description": "posts.views",
        "peekOfCode": "def index(request):\n    latest_question_list = Post.objects.all()[:5]\n    return render(request, \"posts/index.html\", {\"latest_question_list\": latest_question_list})\ndef detail(request, question_id):\n    question = get_object_or_404(Post, pk=question_id)\n    return render(request, \"posts/detail.html\", {\"question\": question})",
        "detail": "posts.views",
        "documentation": {}
    },
    {
        "label": "detail",
        "kind": 2,
        "importPath": "posts.views",
        "description": "posts.views",
        "peekOfCode": "def detail(request, question_id):\n    question = get_object_or_404(Post, pk=question_id)\n    return render(request, \"posts/detail.html\", {\"question\": question})",
        "detail": "posts.views",
        "documentation": {}
    },
    {
        "label": "RestConfig",
        "kind": 6,
        "importPath": "rest.apps",
        "description": "rest.apps",
        "peekOfCode": "class RestConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'rest'",
        "detail": "rest.apps",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "rest.serializers",
        "description": "rest.serializers",
        "peekOfCode": "class UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'url', 'username', 'email', 'groups']\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ['id', 'url', 'name']\nclass PostSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:",
        "detail": "rest.serializers",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "kind": 6,
        "importPath": "rest.serializers",
        "description": "rest.serializers",
        "peekOfCode": "class GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ['id', 'url', 'name']\nclass PostSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Post\n        fields = ['id', 'text', 'pub_date']",
        "detail": "rest.serializers",
        "documentation": {}
    },
    {
        "label": "PostSerializer",
        "kind": 6,
        "importPath": "rest.serializers",
        "description": "rest.serializers",
        "peekOfCode": "class PostSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Post\n        fields = ['id', 'text', 'pub_date']",
        "detail": "rest.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "rest.urls",
        "description": "rest.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\nrouter.register(r\"posts\", views.PostViewSet)\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
        "detail": "rest.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "rest.urls",
        "description": "rest.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
        "detail": "rest.urls",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "rest.views",
        "description": "rest.views",
        "peekOfCode": "class UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.",
        "detail": "rest.views",
        "documentation": {}
    },
    {
        "label": "GroupViewSet",
        "kind": 6,
        "importPath": "rest.views",
        "description": "rest.views",
        "peekOfCode": "class GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n    permission_classes = [permissions.IsAuthenticated]\nclass PostViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows posts to be viewed or edited.",
        "detail": "rest.views",
        "documentation": {}
    },
    {
        "label": "PostViewSet",
        "kind": 6,
        "importPath": "rest.views",
        "description": "rest.views",
        "peekOfCode": "class PostViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows posts to be viewed or edited.\n    \"\"\"\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    permission_classes = [permissions.IsAuthenticated]",
        "detail": "rest.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.asgi",
        "description": "server.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "server.asgi",
        "documentation": {}
    },
    {
        "label": "combine_lists",
        "kind": 2,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "def combine_lists(*lists):\n    return [item for sublist in lists for item in sublist]\nINSTALLED_APPS = combine_lists(\n    [\n        'posts.apps.PostsConfig',\n    ],\n    [\n        'rest_framework',\n    ],\n    [",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).parent.parent\ntry:\n    load_dotenv(BASE_DIR / \".env\")  # here you indicate where your .env file is\nexcept:\n    print(\"No .env file found\")\n    pass\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('DJANGO_SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = os.getenv(\"SERVER_URL\").split(',')\nCSRF_TRUSTED_ORIGINS = os.getenv(\"CSRF_TRUSTED_ORIGINS\").split(',')\n# Application definition",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = os.getenv(\"SERVER_URL\").split(',')\nCSRF_TRUSTED_ORIGINS = os.getenv(\"CSRF_TRUSTED_ORIGINS\").split(',')\n# Application definition\ndef combine_lists(*lists):\n    return [item for sublist in lists for item in sublist]\nINSTALLED_APPS = combine_lists(\n    [",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = os.getenv(\"SERVER_URL\").split(',')\nCSRF_TRUSTED_ORIGINS = os.getenv(\"CSRF_TRUSTED_ORIGINS\").split(',')\n# Application definition\ndef combine_lists(*lists):\n    return [item for sublist in lists for item in sublist]\nINSTALLED_APPS = combine_lists(\n    [\n        'posts.apps.PostsConfig',\n    ],",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv(\"SERVER_URL\").split(',')\nCSRF_TRUSTED_ORIGINS = os.getenv(\"CSRF_TRUSTED_ORIGINS\").split(',')\n# Application definition\ndef combine_lists(*lists):\n    return [item for sublist in lists for item in sublist]\nINSTALLED_APPS = combine_lists(\n    [\n        'posts.apps.PostsConfig',\n    ],\n    [",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = os.getenv(\"CSRF_TRUSTED_ORIGINS\").split(',')\n# Application definition\ndef combine_lists(*lists):\n    return [item for sublist in lists for item in sublist]\nINSTALLED_APPS = combine_lists(\n    [\n        'posts.apps.PostsConfig',\n    ],\n    [\n        'rest_framework',",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "INSTALLED_APPS = combine_lists(\n    [\n        'posts.apps.PostsConfig',\n    ],\n    [\n        'rest_framework',\n    ],\n    [\n        'django.contrib.admin',\n        'django.contrib.auth',",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'server.urls'",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "ROOT_URLCONF = 'server.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "WSGI_APPLICATION = 'server.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = './static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = './static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = './static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = './static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = './static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "STATIC_ROOT = './static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "server.settings",
        "description": "server.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}",
        "detail": "server.settings",
        "documentation": {}
    },
    {
        "label": "combine_lists",
        "kind": 2,
        "importPath": "server.urls",
        "description": "server.urls",
        "peekOfCode": "def combine_lists(*lists):\n    return [item for sublist in lists for item in sublist]\nurlpatterns = combine_lists(\n    [\n        path('', include(\"landing.urls\")),\n        path('posts/', include(\"posts.urls\")),\n        path('api/', include(\"rest.urls\")),\n        path('test/', include(\"getpost.urls\")),\n        path('admin/', admin.site.urls),\n    ],",
        "detail": "server.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "server.urls",
        "description": "server.urls",
        "peekOfCode": "urlpatterns = combine_lists(\n    [\n        path('', include(\"landing.urls\")),\n        path('posts/', include(\"posts.urls\")),\n        path('api/', include(\"rest.urls\")),\n        path('test/', include(\"getpost.urls\")),\n        path('admin/', admin.site.urls),\n    ],\n    [],\n    static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "server.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "server.wsgi",
        "description": "server.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "server.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'server.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]